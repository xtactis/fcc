#include <vector>
#include "../AVR/AVR.hpp"
#include "IR2AVR.hpp"

inline u16 swapendiannes16(u16 x) {
    return ((x & 0xFF00) >> 8) | ((x & 0x00FF) << 8);
}

inline u32 swapendiannes(u32 x) {
    return (swapendiannes16((x & 0xFFFF0000) >> 16) << 16) | swapendiannes16(x & 0x0000FFFF);
}

int main(int argc, char **argv) {
    std::vector<IR> ir = {
        {IRt::nop, {}, 0},
        {IRt::pop, {0xF}, 0},
        {IRt::push, {0xE}, 0},
        {IRt::mov, {0x2A, 3}, 0x2},
        {IRt::mov, {5, 8}, 0},
        {IRt::retc, {0xDEAD}, 0x1},
        {IRt::ret, {}, 0},
        {IRt::add, {3, 5}, 0},
        {IRt::add, {71, 3}, 0x2},
    };
    // TODO(mdizdar): make a Intel HEX reader/writer instead of this insanity
    std::vector<u16> AVRinstructions = {
        0x0C94, 0x2A00, 0x0C94, 0x3600, 0x0C94, 0x5400, 0x0C94, 0x3400,
        0x0C94, 0x3400, 0x0C94, 0x3400, 0x0C94, 0x3400, 0x0C94, 0x3400,
        0x0C94, 0x3400, 0x0C94, 0x3400, 0x0C94, 0x3400, 0x0C94, 0x3400,
        0x0C94, 0x3400, 0x0C94, 0x3400, 0x0C94, 0x3400, 0x0C94, 0x3400,
        0x0C94, 0x3400, 0x0C94, 0x3400, 0x0C94, 0x3400, 0x0C94, 0x3400,
        0x0C94, 0x3400, 0x1124, 0x1FBE, 0xCFE5, 0xD4E0, 0xDEBF, 0xCDBF,
        0x0E94, 0x7300, 0x0C94, 0x7C00, 0x0C94, 0x0000, 0x1F92, 0x0F92,
        0x0FB6, 0x0F92, 0x1124, 0x2F93, 0x8F93, 0x9F93, 0x8BB3, 0x880F,
        0x8BBB, 0x2FEF, 0x8FE3, 0x92E0, 0x2150, 0x8040, 0x9040, 0xE1F7, 
        0x00C0, 0x0000, 0x80EC, 0x8ABF, 0x9F91, 0x8F91, 0x2F91, 0x0F90,
        0x0FBE, 0x0F90, 0x1F90, 0x1895, 0x1F92, 0x0F92, 0x0FB6, 0x0F92,
        0x1124, 0x2F93, 0x8F93, 0x9F93, 0x8BB3, 0x8695, 0x8BBB, 0xDF9A,
        0x2FEF, 0x8FE3, 0x92E0, 0x2150, 0x8040, 0x9040, 0xE1F7, 0x00C0, 
        0x0000, 0x80EC, 0x8ABF, 0x9F91, 0x8F91, 0x2F91, 0x0F90, 0x0FBE,
        0x0F90, 0x1F90, 0x1895, 0x8FEF, 0x8ABB, 0x8BBB, 0x8AE0, 0x85BF,
        0x80EC, 0x8BBF, 0x7894, 0xFFCF, 0xF894, 0xFFCF
    };
    for (u16 &e: AVRinstructions) {
        //printf("%x\n", e);
        e = swapendiannes16(e);
        //printf("%x\n", e);
    }
    //IR2AVR(ir, AVRinstructions);
    AVR::print(AVRinstructions);
    return 0;
}
